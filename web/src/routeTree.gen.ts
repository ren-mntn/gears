/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ItemSearchIndexImport } from './routes/item-search/index'
import { Route as AdminItemRegistrationIndexImport } from './routes/_admin/item-registration/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ItemSearchIndexRoute = ItemSearchIndexImport.update({
  id: '/item-search/',
  path: '/item-search/',
  getParentRoute: () => rootRoute,
} as any)

const AdminItemRegistrationIndexRoute = AdminItemRegistrationIndexImport.update(
  {
    id: '/_admin/item-registration/',
    path: '/item-registration/',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/item-search/': {
      id: '/item-search/'
      path: '/item-search'
      fullPath: '/item-search'
      preLoaderRoute: typeof ItemSearchIndexImport
      parentRoute: typeof rootRoute
    }
    '/_admin/item-registration/': {
      id: '/_admin/item-registration/'
      path: '/item-registration'
      fullPath: '/item-registration'
      preLoaderRoute: typeof AdminItemRegistrationIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/item-search': typeof ItemSearchIndexRoute
  '/item-registration': typeof AdminItemRegistrationIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/item-search': typeof ItemSearchIndexRoute
  '/item-registration': typeof AdminItemRegistrationIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/item-search/': typeof ItemSearchIndexRoute
  '/_admin/item-registration/': typeof AdminItemRegistrationIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/item-search' | '/item-registration'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/item-search' | '/item-registration'
  id: '__root__' | '/' | '/item-search/' | '/_admin/item-registration/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ItemSearchIndexRoute: typeof ItemSearchIndexRoute
  AdminItemRegistrationIndexRoute: typeof AdminItemRegistrationIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ItemSearchIndexRoute: ItemSearchIndexRoute,
  AdminItemRegistrationIndexRoute: AdminItemRegistrationIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/item-search/",
        "/_admin/item-registration/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/item-search/": {
      "filePath": "item-search/index.tsx"
    },
    "/_admin/item-registration/": {
      "filePath": "_admin/item-registration/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
